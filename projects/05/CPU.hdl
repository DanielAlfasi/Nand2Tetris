// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Make a refference for type of instruction
    Not(in=instruction[15], out=IA);
    Not(in=IA, out=IC);
    
    // Calculate by instructions[6-11] of the Instruction bus
    ALU(x=Dout, y=AorMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=aluout, zr=zeroout, ng=negativeout); 






    // Checks by the truth table of according to dest

    // Makes a sel according to dest truth table in C instance
    And(a=IC, b=instruction[5], out=aluA);    

    // Peforms the operation if aluA is true
    Mux16(a=instruction, b=aluout, sel=aluA, out=Aregister);
    
    // Makes the load for the ARegister
    Or(a=IA, b=aluA, out=loadAreg);  
    // Performs the operation on Aregister
    ARegister(in=Aregister, load=loadAreg, out=Aregout);
    // Checks if a == 0 or a == 1 and fixes the comp accordinlly
    Mux16(a=Aregout, b=inM, sel=instruction[12], out=AorMout);


    // Makes the load according to the instruction[4] for data reg if needed
    And(a=IC, b=instruction[4], out=loadDreg);

    // Performs the operation on Dregister
    DRegister(in=aluout, load=loadDreg, out=Dout);    
    
    
        
    // Makes the Address output
    Or16(a=false, b=Aregout, out[0..14]=addressM);
    Or16(a=false, b=aluout, out=outM);

    // Checks if need to be written
    And(a=IC, b=instruction[3], out=writeM);
    
    // Jump truth table

    Or(a=zeroout, b=negativeout, out=zeroorneg);
    Not(in=zeroorneg, out=notzeroorneg);       


    And(a=zeroout, b=instruction[1], out=jeq);    
    And(a=negativeout, b=instruction[2], out=jlt);
    And(a=notzeroorneg, b=instruction[0], out=jgt); 

    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jump);           
    And(a=IC, b=jump, out=loadpc); 

    Not(in=loadpc, out=incpc);              
    PC(in=Aregout, inc=incpc, load=loadpc, reset=reset, out[0..14]=pc);
}